@page "/member"
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Add Member</h3>

<NavigationLock ConfirmExternalNavigation="true"
                 OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="@editContext" FormName="member-form" OnValidSubmit="Submit">

  <DataAnnotationsValidator />

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Name">Name:</label>
    <div class="col-sm-9">
      <InputText class="form-control" @bind-Value="Member.Name" />
      <ValidationMessage For="@(() => Member.Name)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Email">Email:</label>
    <div class="col-sm-9">
      <InputText type="email" class="form-control" formnovalidate @bind-Value="Member.Email" />
      <ValidationMessage For="@(() => Member.Email)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Password">Password:</label>
    <div class="col-sm-9">
      <InputText type="password" class="form-control" @bind-Value="Member.Password" />
      <ValidationMessage For="@(() => Member.Password)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Message">Message:</label>
    <div class="col-sm-9">
      <InputTextArea class="form-control" @bind-Value="Member.Message" />
      <ValidationMessage For="@(() => Member.Message)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Country">Country:</label>
    <div class="col-sm-9">
      <InputSelect class="form-control" @bind-Value="Member.Country">
        @foreach (var country in Countries.All)
        {
          <option value="@country.Key">@country.Value</option>
        }
      </InputSelect>
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Subscriber">Subscribe:</label>
    <div class="col-sm-9">
      <InputCheckbox class="form-check-input" @bind-Value="Member.Subscriber" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Gender">Gender:</label>
    <div class="col-sm-9">
      <InputRadioGroup Name="Gender" @bind-Value="Member.Gender">
        @foreach (Gender gender in Enum.GetValues<Gender>())
        {
          <InputRadio class="form-check-input" Name="Gender" Value="@gender" />
          <label class="form-check-label">@gender</label>
        }
      </InputRadioGroup>

    </div>
  </div>

  <div class="form-group mb-0">
    <button type="submit" class="btn btn-primary">
      Submit
    </button>
  </div>
</EditForm>

@code {

  private Member Member { get; init; } = new Member()
    {
      Name = "John",
      Password = string.Empty,
      Subscriber = false,
      Gender = Gender.Male,
      Email = "john.do@mailg.be",
      Message = "Piece",
      Country = "BE"
    };

  private EditContext? editContext;

  protected override void OnInitialized()
  {
    editContext = new(Member); 
  }

  private async Task OnBeforeInternalNavigation(LocationChangingContext context)
  {
    if (editContext!.IsModified())
    {
      bool isConfirmed = await jsRuntime.InvokeAsync<bool>("confirm",
        "Are you sure you want to throw away your changes?");
      if (!isConfirmed)
      {
        context.PreventNavigation();
      }
    }
  }

  // protected override void OnAfterRender(bool firstRender)
  // {
  //   if (firstRender)
  //   {
  //     navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
  //   }
  // }

  // private ValueTask OnLocationChanging(LocationChangingContext context)
  // {
  //   if (editContext!.IsModified())
  //   {
  //     context.PreventNavigation();
  //   }
  //   return ValueTask.CompletedTask;
  // }

  public void Submit()
  {
    editContext.MarkAsUnmodified();
  }
}