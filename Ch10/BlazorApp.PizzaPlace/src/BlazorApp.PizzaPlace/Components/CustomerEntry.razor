@using BlazorApp.PizzaPlace.Shared.Validation
@using Blazored.FluentValidation
<h1 class="mt-2 mb-2">@Title</h1>

<EditForm FormName="CustomerEntry"
          EditContext="@editContext"
          OnValidSubmit="ValidSubmit">

  <FluentValidationValidator/>

  <fieldset>
    <div class="row mb-2">
      <label class="col-2" for="name">Name:</label>
      <InputText class="form-control col-6" @bind-Value="@Customer.Name" />
    </div>
    <div class="row mb-2">
      <div class="col-6 offset-2" >
        <ValidationMessage For="@(() => Customer.Name)" />
      </div>
    </div>
    <div class="row mb-2">
      <label class="col-2" for="street">Street:</label>
      <InputText class="form-control col-6" @bind-Value="@Customer.Street" />
    </div>
    <div class="row mb-2">
      <div class="col-6 offset-2">
        <ValidationMessage For="@(() => Customer.Street)" />
      </div>
    </div>
    <div class="row mb-2">
      <label class="col-2" for="city">City:</label>
      <InputText class="form-control col-6" @bind-Value="@Customer.City" />
    </div>
    <div class="row mb-2">
      <div class="col-6 offset-2">
        <ValidationMessage For="@(() => Customer.City)" />
      </div>
    </div>
    <div class="row mb-2">
      <label class="col-2" for="city">ZipCode:</label>
      <InputText class="form-control col-6" @bind-Value="@Customer.ZipCode" />
    </div>
    <div class="row mb-2">
      <div class="col-6 offset-2">
        <ValidationMessage For="@(() => Customer.ZipCode)" />
      </div>
    </div>
    <div class="row mb-2">
      <button class="btn btn-primary"
              disabled="@(!formValid)">
        @SubmitTitle
      </button>
    </div>
  </fieldset>
</EditForm>

@code {
  [Parameter]
  [EditorRequired]
  public string Title { get; set; } = default!;

  [Parameter]
  [EditorRequired]
  public required Customer Customer { get; set; }

  [Parameter]
  public EventCallback<Customer> CustomerChanged { get; set; }

  [Parameter]
  [EditorRequired]
  public required string SubmitTitle { get; set; }

  [Parameter]
  [EditorRequired]
  public required EventCallback SubmitClicked { get; set; }

  private EditContext editContext = default!;
  private bool formValid = false;
  private CustomerFluentValidator validator = new();

  protected override void OnInitialized()
  {
    editContext = new(Customer);
    editContext.OnFieldChanged += (_, _) =>
    {
      formValid = editContext.Validate();
      StateHasChanged();
    };
  }

  public async Task ValidSubmit()
  {
    await CustomerChanged.InvokeAsync(Customer);
    await SubmitClicked.InvokeAsync();
  }
}