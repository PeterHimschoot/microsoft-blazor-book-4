@page "/weather"

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <Grid Data="@forecasts"
        Class="table table-hover table-bordered table-striped"
        AllowSorting="true">
    <GridColumn TItem="WeatherForecast" HeaderText="Date" PropertyName="Date" SortKeySelector="item => item.Date">
      @context.Date
    </GridColumn>
    <GridColumn TItem="WeatherForecast" HeaderText="Temp. (C)" PropertyName="Name" SortKeySelector="item => item.TemperatureC">
      @context.TemperatureC
    </GridColumn>
    <GridColumn TItem="WeatherForecast" HeaderText="Temp. (C)" PropertyName="DOJ" SortKeySelector="item => item.TemperatureF">
      @context.TemperatureF
    </GridColumn>
    <GridColumn TItem="WeatherForecast" HeaderText="Designation" PropertyName="Designation" SortKeySelector="item => item.Summary">
      @context.Summary
    </GridColumn>
  </Grid>
}

@code {
  private WeatherForecast[]? forecasts;

  protected override async Task OnInitializedAsync()
  {
    // Simulate asynchronous loading to demonstrate a loading indicator
    await Task.Delay(500);

    var startDate = DateOnly.FromDateTime(DateTime.Now);
    var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
    forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
      {
        Date = startDate.AddDays(index),
        TemperatureC = Random.Shared.Next(-20, 55),
        Summary = summaries[Random.Shared.Next(summaries.Length)]
      }).ToArray();
  }

  private class WeatherForecast
  {
    public DateOnly Date { get; set; }
    public int TemperatureC { get; set; }
    public string? Summary { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }
}
