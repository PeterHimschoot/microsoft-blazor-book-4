@page "/counter"
@rendermode InteractiveAuto
@* @rendermode @(new InteractiveAutoRenderMode(prerender: false)) *@
@inject ISessionManager sessions
@inject ISessionIdManager sessionIdManager
@implements IDisposable

<PageTitle>Counter</PageTitle>

<p>render location: @renderLocation</p>

<p>Cookie: @sessionId</p>

<p>State: @mystate</p>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount"
    disabled="@IsStaticRender">Click me</button>

<NavigationLock ConfirmExternalNavigation="false" OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>

@code {
    private int currentCount = 0;
    private string mystate;
    private string renderLocation;
    private Session session;
    private string? sessionId;
    private bool IsStaticRender;

    protected override async Task OnInitializedAsync()
    {
        IsStaticRender = true;
        var isBrowser = OperatingSystem.IsBrowser();
        if (!isBrowser)
        {
            renderLocation = "server";
            sessionId = await sessionIdManager.GetSessionId();
            session = await sessions.GetSession();
            try
            {
                mystate = (string)session["mystate"];
            }
            catch (Exception ex)
            {
                mystate = ex.Message;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IsStaticRender = false;
        var isBrowser = OperatingSystem.IsBrowser();
        if (isBrowser)
        {
            if (firstRender)
            {
                renderLocation = "wasm";
                sessionId = await sessionIdManager.GetSessionId();
                StateHasChanged();
                session = await sessions.GetSession();
                try
                {
                    mystate = (string)session["mystate"];
                }
                catch (Exception ex)
                {
                    mystate = ex.Message;
                }
                StateHasChanged();
            }
        }
        else
        {
            if (firstRender)
            {
                StateHasChanged();
            }
        }
    }

    private void IncrementCount()
    {
        currentCount++;
        mystate = Guid.NewGuid().ToString();
        session["mystate"] = mystate;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var isBrowser = OperatingSystem.IsBrowser();
        if (isBrowser)
        {
            await sessions.UpdateSession(session);
        }
        context.PreventNavigation();
    }

    public void Dispose()
    {
        var isBrowser = OperatingSystem.IsBrowser();
        if (isBrowser)
        {
            sessions.UpdateSession(session);
        }
    }
}
