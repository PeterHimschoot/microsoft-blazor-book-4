@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status"><span class="@BackgroundColor">@currentCount</span></p>

@* <p>
  <input type="number" @bind="@increment" 
    @onkeypress="KeyHandler"
    @onkeypress:preventDefault="@shouldPreventDefault"/>
</p>
 *@
 <p>
  <input type="number" @bind="@increment"
         @onkeypress="KeyHandler"
         @onkeypress:preventDefault />
</p>

<p><input type="number" @bind-value="@increment" @bind-value:event="oninput" /></p>

@* <p>
  <input type="number"
         value="@increment"
         @onchange="@((ChangeEventArgs e) => increment = int.Parse($"{e.Value}"))" />
</p> *@

<button class="btn btn-primary"
        disabled="@(currentCount >= 10)"
        @onclick="IncrementCount">
  Click me
</button>

@* Add this after the Click me button *@
@* <button class="btn btn-primary" @onclick="AutoIncrement">Auto</button>
 *@

@* <button class="btn btn-primary"
        disabled="@(currentCount >= 10)"
        @onclick="() => currentCount++">
  Click me
</button> *@

@* <h1>Stop Propagation</h1>

<div class="background"
     @onmousemove="OuterMouseMove">
  <p>@outerPos</p>
  <div class="foreground"
       @onmousemove="InnerMouseMove"
  @onmousemove:stopPropagation>
    <p>@innerPos</p>
  </div>
</div> *@

@code {
  private int currentCount = 0;
  private int increment = 1;

  // private void IncrementCount()
  // {
  //   currentCount++;
  // }

  private void IncrementCount(MouseEventArgs e)
  {
    if (e.CtrlKey)
    {
      currentCount -= increment;
    }
    else
    {
      currentCount += increment;
    }
  }

  // add this next to the KeyHandler method
  private bool shouldPreventDefault = true;
  private void KeyHandler(KeyboardEventArgs e)
  {
    if (e.Key == "+")
    {

      increment += 1;
    }
    else if (e.Key == "-")
    {
      increment -= 1;
    }
  }

  private string BackgroundColor
    => (currentCount % 2 == 0) ? "red-background" : "yellow-background";

  private string outerPos = "Move mouse";
  private void OuterMouseMove(MouseEventArgs e)
  {
    outerPos = $"Mouse last at {e.ClientX}x{e.ClientY}";
  }
  private string innerPos = "";
  private void InnerMouseMove(MouseEventArgs e)
  {
    innerPos = $"Mouse last at {e.ClientX}x{e.ClientY}";
  }

  private void AutoIncrement()
  {
    Timer timer = new(
    callback: (_) =>
    {
      // Changes need to be done on the correct thread!
      this.InvokeAsync(() =>
      {
        Console.WriteLine("++");
        IncrementCount(new MouseEventArgs());
        StateHasChanged(); // Tell Blazor that changes were made
      });
    },
    state: null,
    dueTime: TimeSpan.FromSeconds(1),
    period: TimeSpan.FromSeconds(1));
  }
}
