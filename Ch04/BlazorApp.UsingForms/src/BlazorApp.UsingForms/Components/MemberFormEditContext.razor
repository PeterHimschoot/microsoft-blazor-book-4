<h3>Custom Validation With EditContext</h3>

<EditForm EditContext="@editContext" FormName="member-form" OnValidSubmit="Submit">

  @* No changes inside the EditForm *@
  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Name">Name:</label>
    <div class="col-sm-9">
      <InputText class="form-control" @bind-Value="Member.Name" />
      <ValidationMessage For="@(() => Member.Name)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Email">Email:</label>
    <div class="col-sm-9">
      <InputText type="email" class="form-control" novalidate @bind-Value="Member.Email" />
      <ValidationMessage For="@(() => Member.Email)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Password">Password:</label>
    <div class="col-sm-9">
      <InputText type="password" class="form-control" @bind-Value="Member.Password" />
      <ValidationMessage For="@(() => Member.Password)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Message">Message:</label>
    <div class="col-sm-9">
      <InputTextArea class="form-control" @bind-Value="Member.Message" />
      <ValidationMessage For="@(() => Member.Message)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Country">Country:</label>
    <div class="col-sm-9">
      <InputSelect class="form-control" @bind-Value="Member.Country">
        @foreach (var country in Countries.All)
        {
          <option value="@country.Key">@country.Value</option>
        }
      </InputSelect>
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Subscriber">Subscribe:</label>
    <div class="col-sm-9">
      <InputCheckbox class="form-check-input" @bind-Value="Member.Subscriber" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Gender">Gender:</label>
    <div class="col-sm-9">
      <InputRadioGroup Name="Gender" @bind-Value="Member.Gender">
        @foreach (Gender gender in Enum.GetValues<Gender>())
        {
          <InputRadio class="form-check-input" Name="Gender" Value="@gender" />
          <label class="form-check-label">@gender</label>
        }
      </InputRadioGroup>

    </div>
  </div>

  <div class="form-group mb-0">
    <button type="submit" class="btn btn-primary">
      Submit
    </button>
  </div>
</EditForm>



@code {

  [Parameter]
  [EditorRequired]
  public required Member Member { get; set; }

  private EditContext? editContext;
  private ValidationMessageStore? messageStore;

  protected override void OnInitialized()
  {
    editContext = new(Member); // Member has already been set

    // editContext.OnFieldChanged += HandleFieldChanged;

    editContext.OnValidationRequested += HandleValidationRequested;
    messageStore = new(editContext);
  }

  // private void HandleFieldChanged(object? _, FieldChangedEventArgs e)
  // {
  //   editContext?.Validate();
  // }

  private void HandleValidationRequested(object? sender, 
    ValidationRequestedEventArgs e)
  {
    messageStore?.Clear();
    if( Member.Name is not { Length: > 0})
    {
      messageStore?.Add(() => Member.Name, "Name is mandatory");
    } else if (Member.Name is not { Length: < 100 })
    {
      messageStore?.Add(() => Member.Name, "Name cannot be longer that 100 characters");
    }
  }

  public void Submit()
  {
    Console.WriteLine(Member.ToJson());
  }
}