@using Blazored.FluentValidation

<h3>Disabling the Submit Button</h3>

<EditForm FormName="member-form" OnValidSubmit="Submit" EditContext="@editContext">

  <FluentValidationValidator Validator="validator" />

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Name">Name:</label>
    <div class="col-sm-9">
      <InputText class="form-control" @bind-Value="Member.Name" />
      <ValidationMessage For="@(() => Member.Name)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Email">Email:</label>
    <div class="col-sm-9">
      <InputText type="email" class="form-control" formnovalidate @bind-Value="Member.Email" />
      <ValidationMessage For="@(() => Member.Email)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Password">Password:</label>
    <div class="col-sm-9">
      <InputText type="password" class="form-control" @bind-Value="Member.Password" />
      <ValidationMessage For="@(() => Member.Password)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Message">Message:</label>
    <div class="col-sm-9">
      <InputTextArea class="form-control" @bind-Value="Member.Message" />
      <ValidationMessage For="@(() => Member.Message)" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Country">Country:</label>
    <div class="col-sm-9">
      <InputSelect class="form-control" @bind-Value="Member.Country">
        @foreach (var country in Countries.All)
        {
          <option value="@country.Key">@country.Value</option>
        }
      </InputSelect>
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Subscriber">Subscribe:</label>
    <div class="col-sm-9">
      <InputCheckbox class="form-check-input" @bind-Value="Member.Subscriber" />
    </div>
  </div>

  <div class="form-group row mb-1">
    <label class="col-sm-3 col-form-label" for="Gender">Gender:</label>
    <div class="col-sm-9">
      <InputRadioGroup Name="Gender" @bind-Value="Member.Gender">
        @foreach (Gender gender in Enum.GetValues<Gender>())
        {
          <InputRadio class="form-check-input" Name="Gender" Value="@gender" />
          <label class="form-check-label">@gender</label>
        }
      </InputRadioGroup>

    </div>
  </div>

  <div class="form-group mb-0">
    <button type="submit" class="btn btn-primary"
      disabled="@(!formValid)">
      Submit
    </button>
  </div>
</EditForm>



@code {

  [Parameter]
  [EditorRequired]
  public required Member Member { get; set; }

  private FluentMemberValidator validator = new();
  private EditContext editContext = default!;
  private bool formValid = false;

  protected override void OnInitialized()
  {
    editContext = new(Member); // Member has been set already
    editContext.OnFieldChanged += (_, _) =>
    {
      formValid = editContext.Validate();
      StateHasChanged();
    };

    editContext.OnValidationRequested += (_, _) =>
    {
      formValid = validator.Validate(Member).IsValid;
      StateHasChanged();
    };

    formValid = validator.Validate(Member).IsValid;
  }

  public void Submit()
  {
    Console.WriteLine(Member.ToJson());
  }
}